import 'package:hlshop/all_file/all_file.dart';class ApiStatusListener<B extends StateStreamable<S>, S>    extends StatelessWidget {  const ApiStatusListener({    required this.getStatus,    super.key,    this.child,    this.onInitial,    this.onDone,    this.onPending,    this.onError,  });  final ApiStatus Function(S state) getStatus;  final Widget? child;  final ValueChanged<S>? onInitial;  final ValueChanged<S>? onDone;  final ValueChanged<S>? onPending;  final void Function(S, Object?)? onError;  @override  Widget build(BuildContext context) {    return BlocListener<B, S>(      listenWhen: (previous, current) {        final status = getStatus(current);        final previousStatus = getStatus(previous);        if (status.isError) {          return true;        }        return status != previousStatus;      },      listener: _onStatusChange,      child: child ?? const SizedBox.shrink(),    );  }  void _onStatusChange(BuildContext context, S state) {    getStatus(state).whenOrNull(      initial: () => onInitial?.call(state),      loading: () => onPending?.call(state),      refreshing: () => onPending?.call(state),      done: () => onDone?.call(state),      error: (error) {        if (onError != null) {          onError!(state, error);          return;        }        if(error != null){          DialogUtils.showErrorDialog(            context: context,            content: context.getAppErrorMsg(error),            error: error,          );        }      },    );  }}